CREATE TABLE roles (
    id INT AUTO_INCREMENT PRIMARY KEY,
    role_name VARCHAR(50)
);

INSERT INTO roles (role_name) VALUES ('Apprenant'), ('Administrateur'), ('Intervenant'), ('Pédagogie');

CREATE TABLE Utilisateurs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nom VARCHAR(50),
    email VARCHAR(100),
    role_id INT,
    FOREIGN KEY (role_id) REFERENCES roles(id)
);
CREATE TABLE Salles (
    id INT AUTO_INCREMENT PRIMARY KEY,
    room_name VARCHAR(10) NOT NULL  -- Par exemple : '200A', '200B', etc.
);
CREATE TABLE Réservations (
    id INT AUTO_INCREMENT PRIMARY KEY,
    room_id INT,  -- Clé étrangère pour la salle
    user_id INT,  -- Clé étrangère pour l'utilisateur qui réserve
    booking_date DATE NOT NULL,  -- Date de la réservation
    start_time TIME NOT NULL,  -- Heure de début
    end_time TIME NOT NULL,  -- Heure de fin
    FOREIGN KEY (room_id) REFERENCES rooms(id),
    FOREIGN KEY (user_id) REFERENCES utilisateurs(id)
);

DELIMITER //
CREATE TRIGGER check_booking_time
BEFORE INSERT ON Réservation
FOR EACH ROW
BEGIN
    DECLARE count INT;
    SELECT COUNT(*) INTO count
    FROM Réservations
    WHERE room_id = NEW.room_id
    AND booking_date = NEW.booking_date
    AND (
        (NEW.start_time < end_time AND NEW.end_time > start_time)
    );
    
    IF count > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Conflit d''horaire : la salle est déjà réservée à ce créneau';
    END IF;
END //
DELIMITER ;

CREATE TABLE Cours (
    id INT AUTO_INCREMENT PRIMARY KEY,
    course_name VARCHAR(100) NOT NULL,  -- Nom du cours
    pedagogie_id INT,  -- Référence au membre de la pédagogie qui organise le cours
    room_id INT,  -- Référence à la salle
    course_date DATE NOT NULL,  -- Date du cours
    start_time TIME NOT NULL,  -- Heure de début du cours
    end_time TIME NOT NULL,  -- Heure de fin du cours
    FOREIGN KEY (pedagogie_id) REFERENCES utilisateurs(id),  -- Clé étrangère vers la table des utilisateurs (membres de la pédagogie)
    FOREIGN KEY (room_id) REFERENCES salles(id)  -- Clé étrangère vers la table des salles
);
SELECT COUNT(*)
FROM Réservations
WHERE room_id = :room_id  -- Ici, on utilise une salle spécifique dynamique (variable)
AND booking_date = :booking_date  -- Date du créneau choisi
AND (
    (start_time < :end_time AND end_time > :start_time)  -- Vérification dynamique des conflits horaires
);

SELECT COUNT(*)
FROM Cours
WHERE room_id = :room_id  -- Salle dynamique choisie par le professeur
AND course_date = :course_date  -- Date dynamique
AND (
    (start_time < :end_time AND end_time > :start_time)  -- Vérification de l'heure de début et de fin
);

INSERT INTO Cours (course_name, pedagogie_id, room_id, course_date, start_time, end_time)
VALUES (:course_name, :pedagogie_id, :room_id, :course_date, :start_time, :end_time);

